package io.github.gerardpi.easy.demo;

import org.springframework.core.io.ResourceLoader;
import org.springframework.data.jdbc.core.convert.*;
import org.springframework.data.jdbc.core.mapping.JdbcMappingContext;
import org.springframework.data.relational.core.dialect.Dialect;
import org.springframework.data.relational.core.mapping.PersistentPropertyPathExtension;
import org.springframework.data.relational.core.mapping.RelationalPersistentEntity;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;
import org.springframework.util.ClassUtils;

import java.sql.ResultSet;


public class ImmutablesJdbcConverter extends BasicJdbcConverter {
    public static final String IMMUTABLE_IMPLEMENTATION_CLASS = "%s.Immutable%s";
    private final ResourceLoader resourceLoader;
    private final JdbcMappingContext mappingContext;



    ImmutablesJdbcConverter(
            JdbcMappingContext mappingContext,
            NamedParameterJdbcOperations operations,
            RelationResolver relationResolver,
            JdbcCustomConversions conversions,
            Dialect dialect,
            ResourceLoader resourceLoader) {
        super(mappingContext, relationResolver, conversions, new DefaultJdbcTypeFactory(operations.getJdbcOperations()), dialect.getIdentifierProcessing());
        this.mappingContext = mappingContext;
        this.resourceLoader = resourceLoader;
    }

    /**
     * https://github.com/spring-projects/spring-data-examples/blob/main/jdbc/immutables/src/main/java/example/springdata/jdbc/immutables/Application.java
     */
    @Override
    public <T> T mapRow(RelationalPersistentEntity<T> entity, ResultSet resultSet, Object key) {
        // rows will not mapped to the entity interface, but to its implementation generated by Immutable
        RelationalPersistentEntity<T> implementationEntity = getImplementationEntity(mappingContext, entity);
        return super.mapRow(implementationEntity, resultSet, key);
    }

    @Override
    public <T> T mapRow(
            PersistentPropertyPathExtension path, ResultSet resultSet,
            Identifier identifier,
            Object key) {

        // rows will not mapped to the entity interface, but to its implementation generated by Immutable
        RelationalPersistentEntity<?> implementationEntity = getImplementationEntity(
                mappingContext,
                path.getLeafEntity());
        var propertyPath = new DelegatePersistentPropertyPathExtension(mappingContext,
                path.getRequiredPersistentPropertyPath(), implementationEntity);
        return super.mapRow(propertyPath, resultSet, identifier, key);
    }

    /**
     * Returns if the entity passed as an argument is an interface the implementation provided by Immutable is provided
     * instead. In all other cases the entity passed as an argument is returned.
     */
    @SuppressWarnings("unchecked")
    private <T> RelationalPersistentEntity<T> getImplementationEntity(JdbcMappingContext mappingContext,
                                                                      RelationalPersistentEntity<T> entity) {

        Class<T> type = entity.getType();
        if (type.isInterface()) {

            var immutableClass = String.format(IMMUTABLE_IMPLEMENTATION_CLASS, type.getPackageName(), type.getSimpleName());
            if (ClassUtils.isPresent(immutableClass, resourceLoader.getClassLoader())) {

                return (RelationalPersistentEntity<T>) mappingContext
                        .getPersistentEntity(ClassUtils.resolveClassName(immutableClass, resourceLoader.getClassLoader()));
            }

        }
        return entity;
    }
}
